# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rtcrobot/Control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Control(genpy.Message):
  _md5sum = "37b8adb76b20d5e3dea76b096f6e65a0"
  _type = "rtcrobot/Control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 rvel_target
int16 lvel_target
int16 led_status

bool    output_1
bool    output_2
bool    output_3
bool    output_4"""
  __slots__ = ['rvel_target','lvel_target','led_status','output_1','output_2','output_3','output_4']
  _slot_types = ['int16','int16','int16','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rvel_target,lvel_target,led_status,output_1,output_2,output_3,output_4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rvel_target is None:
        self.rvel_target = 0
      if self.lvel_target is None:
        self.lvel_target = 0
      if self.led_status is None:
        self.led_status = 0
      if self.output_1 is None:
        self.output_1 = False
      if self.output_2 is None:
        self.output_2 = False
      if self.output_3 is None:
        self.output_3 = False
      if self.output_4 is None:
        self.output_4 = False
    else:
      self.rvel_target = 0
      self.lvel_target = 0
      self.led_status = 0
      self.output_1 = False
      self.output_2 = False
      self.output_3 = False
      self.output_4 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3h4B().pack(_x.rvel_target, _x.lvel_target, _x.led_status, _x.output_1, _x.output_2, _x.output_3, _x.output_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.rvel_target, _x.lvel_target, _x.led_status, _x.output_1, _x.output_2, _x.output_3, _x.output_4,) = _get_struct_3h4B().unpack(str[start:end])
      self.output_1 = bool(self.output_1)
      self.output_2 = bool(self.output_2)
      self.output_3 = bool(self.output_3)
      self.output_4 = bool(self.output_4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3h4B().pack(_x.rvel_target, _x.lvel_target, _x.led_status, _x.output_1, _x.output_2, _x.output_3, _x.output_4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.rvel_target, _x.lvel_target, _x.led_status, _x.output_1, _x.output_2, _x.output_3, _x.output_4,) = _get_struct_3h4B().unpack(str[start:end])
      self.output_1 = bool(self.output_1)
      self.output_2 = bool(self.output_2)
      self.output_3 = bool(self.output_3)
      self.output_4 = bool(self.output_4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3h4B = None
def _get_struct_3h4B():
    global _struct_3h4B
    if _struct_3h4B is None:
        _struct_3h4B = struct.Struct("<3h4B")
    return _struct_3h4B
