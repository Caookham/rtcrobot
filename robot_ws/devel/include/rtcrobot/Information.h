// Generated by gencpp from file rtcrobot/Information.msg
// DO NOT EDIT!


#ifndef RTCROBOT_MESSAGE_INFORMATION_H
#define RTCROBOT_MESSAGE_INFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rtcrobot
{
template <class ContainerAllocator>
struct Information_
{
  typedef Information_<ContainerAllocator> Type;

  Information_()
    : imu_ax(0.0)
    , imu_ay(0.0)
    , imu_az(0.0)
    , imu_gx(0.0)
    , imu_gy(0.0)
    , imu_gz(0.0)
    , imu_mx(0.0)
    , imu_my(0.0)
    , imu_mz(0.0)
    , range_1(0.0)
    , range_2(0.0)
    , input_1(false)
    , input_2(false)
    , input_3(false)
    , input_4(false)
    , output_1(false)
    , output_2(false)
    , output_3(false)
    , output_4(false)  {
    }
  Information_(const ContainerAllocator& _alloc)
    : imu_ax(0.0)
    , imu_ay(0.0)
    , imu_az(0.0)
    , imu_gx(0.0)
    , imu_gy(0.0)
    , imu_gz(0.0)
    , imu_mx(0.0)
    , imu_my(0.0)
    , imu_mz(0.0)
    , range_1(0.0)
    , range_2(0.0)
    , input_1(false)
    , input_2(false)
    , input_3(false)
    , input_4(false)
    , output_1(false)
    , output_2(false)
    , output_3(false)
    , output_4(false)  {
  (void)_alloc;
    }



   typedef float _imu_ax_type;
  _imu_ax_type imu_ax;

   typedef float _imu_ay_type;
  _imu_ay_type imu_ay;

   typedef float _imu_az_type;
  _imu_az_type imu_az;

   typedef float _imu_gx_type;
  _imu_gx_type imu_gx;

   typedef float _imu_gy_type;
  _imu_gy_type imu_gy;

   typedef float _imu_gz_type;
  _imu_gz_type imu_gz;

   typedef float _imu_mx_type;
  _imu_mx_type imu_mx;

   typedef float _imu_my_type;
  _imu_my_type imu_my;

   typedef float _imu_mz_type;
  _imu_mz_type imu_mz;

   typedef float _range_1_type;
  _range_1_type range_1;

   typedef float _range_2_type;
  _range_2_type range_2;

   typedef uint8_t _input_1_type;
  _input_1_type input_1;

   typedef uint8_t _input_2_type;
  _input_2_type input_2;

   typedef uint8_t _input_3_type;
  _input_3_type input_3;

   typedef uint8_t _input_4_type;
  _input_4_type input_4;

   typedef uint8_t _output_1_type;
  _output_1_type output_1;

   typedef uint8_t _output_2_type;
  _output_2_type output_2;

   typedef uint8_t _output_3_type;
  _output_3_type output_3;

   typedef uint8_t _output_4_type;
  _output_4_type output_4;





  typedef boost::shared_ptr< ::rtcrobot::Information_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtcrobot::Information_<ContainerAllocator> const> ConstPtr;

}; // struct Information_

typedef ::rtcrobot::Information_<std::allocator<void> > Information;

typedef boost::shared_ptr< ::rtcrobot::Information > InformationPtr;
typedef boost::shared_ptr< ::rtcrobot::Information const> InformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rtcrobot::Information_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rtcrobot::Information_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rtcrobot::Information_<ContainerAllocator1> & lhs, const ::rtcrobot::Information_<ContainerAllocator2> & rhs)
{
  return lhs.imu_ax == rhs.imu_ax &&
    lhs.imu_ay == rhs.imu_ay &&
    lhs.imu_az == rhs.imu_az &&
    lhs.imu_gx == rhs.imu_gx &&
    lhs.imu_gy == rhs.imu_gy &&
    lhs.imu_gz == rhs.imu_gz &&
    lhs.imu_mx == rhs.imu_mx &&
    lhs.imu_my == rhs.imu_my &&
    lhs.imu_mz == rhs.imu_mz &&
    lhs.range_1 == rhs.range_1 &&
    lhs.range_2 == rhs.range_2 &&
    lhs.input_1 == rhs.input_1 &&
    lhs.input_2 == rhs.input_2 &&
    lhs.input_3 == rhs.input_3 &&
    lhs.input_4 == rhs.input_4 &&
    lhs.output_1 == rhs.output_1 &&
    lhs.output_2 == rhs.output_2 &&
    lhs.output_3 == rhs.output_3 &&
    lhs.output_4 == rhs.output_4;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rtcrobot::Information_<ContainerAllocator1> & lhs, const ::rtcrobot::Information_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rtcrobot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rtcrobot::Information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtcrobot::Information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtcrobot::Information_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtcrobot::Information_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtcrobot::Information_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtcrobot::Information_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rtcrobot::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51b071e47da4f36ad37e1ffa8c219c91";
  }

  static const char* value(const ::rtcrobot::Information_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51b071e47da4f36aULL;
  static const uint64_t static_value2 = 0xd37e1ffa8c219c91ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtcrobot::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rtcrobot/Information";
  }

  static const char* value(const ::rtcrobot::Information_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rtcrobot::Information_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 imu_ax\n"
"float32 imu_ay\n"
"float32 imu_az\n"
"float32 imu_gx\n"
"float32 imu_gy\n"
"float32 imu_gz\n"
"float32 imu_mx\n"
"float32 imu_my\n"
"float32 imu_mz\n"
"\n"
"float32 range_1\n"
"float32 range_2\n"
"\n"
"bool    input_1\n"
"bool    input_2\n"
"bool    input_3\n"
"bool    input_4\n"
"\n"
"bool    output_1\n"
"bool    output_2\n"
"bool    output_3\n"
"bool    output_4\n"
;
  }

  static const char* value(const ::rtcrobot::Information_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rtcrobot::Information_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_ax);
      stream.next(m.imu_ay);
      stream.next(m.imu_az);
      stream.next(m.imu_gx);
      stream.next(m.imu_gy);
      stream.next(m.imu_gz);
      stream.next(m.imu_mx);
      stream.next(m.imu_my);
      stream.next(m.imu_mz);
      stream.next(m.range_1);
      stream.next(m.range_2);
      stream.next(m.input_1);
      stream.next(m.input_2);
      stream.next(m.input_3);
      stream.next(m.input_4);
      stream.next(m.output_1);
      stream.next(m.output_2);
      stream.next(m.output_3);
      stream.next(m.output_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Information_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtcrobot::Information_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rtcrobot::Information_<ContainerAllocator>& v)
  {
    s << indent << "imu_ax: ";
    Printer<float>::stream(s, indent + "  ", v.imu_ax);
    s << indent << "imu_ay: ";
    Printer<float>::stream(s, indent + "  ", v.imu_ay);
    s << indent << "imu_az: ";
    Printer<float>::stream(s, indent + "  ", v.imu_az);
    s << indent << "imu_gx: ";
    Printer<float>::stream(s, indent + "  ", v.imu_gx);
    s << indent << "imu_gy: ";
    Printer<float>::stream(s, indent + "  ", v.imu_gy);
    s << indent << "imu_gz: ";
    Printer<float>::stream(s, indent + "  ", v.imu_gz);
    s << indent << "imu_mx: ";
    Printer<float>::stream(s, indent + "  ", v.imu_mx);
    s << indent << "imu_my: ";
    Printer<float>::stream(s, indent + "  ", v.imu_my);
    s << indent << "imu_mz: ";
    Printer<float>::stream(s, indent + "  ", v.imu_mz);
    s << indent << "range_1: ";
    Printer<float>::stream(s, indent + "  ", v.range_1);
    s << indent << "range_2: ";
    Printer<float>::stream(s, indent + "  ", v.range_2);
    s << indent << "input_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_1);
    s << indent << "input_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_2);
    s << indent << "input_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_3);
    s << indent << "input_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_4);
    s << indent << "output_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_1);
    s << indent << "output_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_2);
    s << indent << "output_3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_3);
    s << indent << "output_4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.output_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTCROBOT_MESSAGE_INFORMATION_H
