// Generated by gencpp from file rtcrobot_actions/MissionGoal.msg
// DO NOT EDIT!


#ifndef RTCROBOT_ACTIONS_MESSAGE_MISSIONGOAL_H
#define RTCROBOT_ACTIONS_MESSAGE_MISSIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rtcrobot_actions
{
template <class ContainerAllocator>
struct MissionGoal_
{
  typedef MissionGoal_<ContainerAllocator> Type;

  MissionGoal_()
    : mission_id()
    , command()  {
    }
  MissionGoal_(const ContainerAllocator& _alloc)
    : mission_id(_alloc)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mission_id_type;
  _mission_id_type mission_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MissionGoal_

typedef ::rtcrobot_actions::MissionGoal_<std::allocator<void> > MissionGoal;

typedef boost::shared_ptr< ::rtcrobot_actions::MissionGoal > MissionGoalPtr;
typedef boost::shared_ptr< ::rtcrobot_actions::MissionGoal const> MissionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rtcrobot_actions::MissionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rtcrobot_actions::MissionGoal_<ContainerAllocator1> & lhs, const ::rtcrobot_actions::MissionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.mission_id == rhs.mission_id &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rtcrobot_actions::MissionGoal_<ContainerAllocator1> & lhs, const ::rtcrobot_actions::MissionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rtcrobot_actions

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b5710aba2e48af8e934e12797bc144d";
  }

  static const char* value(const ::rtcrobot_actions::MissionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b5710aba2e48af8ULL;
  static const uint64_t static_value2 = 0xe934e12797bc144dULL;
};

template<class ContainerAllocator>
struct DataType< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rtcrobot_actions/MissionGoal";
  }

  static const char* value(const ::rtcrobot_actions::MissionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"# Specify an (optional) name for the mission\n"
"string mission_id\n"
"\n"
"string[] command\n"
;
  }

  static const char* value(const ::rtcrobot_actions::MissionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mission_id);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtcrobot_actions::MissionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rtcrobot_actions::MissionGoal_<ContainerAllocator>& v)
  {
    s << indent << "mission_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mission_id);
    s << indent << "command[]" << std::endl;
    for (size_t i = 0; i < v.command.size(); ++i)
    {
      s << indent << "  command[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTCROBOT_ACTIONS_MESSAGE_MISSIONGOAL_H
